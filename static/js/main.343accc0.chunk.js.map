{"version":3,"sources":["components/molecules/FindOptionProp/index.tsx","components/molecules/GlobalHeader/index.tsx","components/molecules/UsageTitle/index.tsx","components/molecules/DefaultProp/index.tsx","components/molecules/SpanProp/index.tsx","components/molecules/HourLimitProp/index.tsx","components/molecules/IsClearableProp/index.tsx","components/molecules/DefaultScrollOptionValueProp/index.tsx","components/molecules/HideOptionsProps/index.tsx","components/molecules/DisabledOptionsProps/index.tsx","components/molecules/StartTimeProps/index.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["FindOptionProp","useState","option","setOption","findOption","setFindOption","inputValid","setInputValid","version","setVesion","columns","align","label","textarea","style","width","isValid","rows","value","onChange","e","currentTarget","eval","input","GlobalHeader","UsageTitle","DefaultProp","SpanProp","span","setSpan","type","min","parseInt","HourLimitProp","hourLimit","setHourLimit","IsClearableProp","isClearable","setIsClearable","name","checked","String","DefaultScrollOptionValueProp","defaultOption","setDefaultOption","defaultScrollOptionValue","HideOptionsProps","hideOptions","setHideOptions","hideOption","setHideOption","raised","onClick","disabled","nonInteractive","map","i","index","filter","_","DisabledOptionsProps","disabledOptions","setDisabledOptions","disabledOption","setDisabledOption","StartTimeProps","startTimeOption","setStartTimeOption","startTime","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"y9CAQMA,eAAiB,SAAjBA,iBAAwB,IAAD,UACCC,sDADD,2OACpBC,OADoB,cACZC,UADY,yBAESF,oDAAQ,iVAFjB,4OAEpBG,YAFoB,cAERC,cAFQ,yBAeSJ,qDAAkB,GAf3B,4OAepBK,WAfoB,cAeRC,cAfQ,yBAgBEN,oDAAiB,GAhBnB,4OAgBpBO,QAhBoB,cAgBXC,UAhBW,cAkB3B,OACE,2DAAC,6DAAD,UACE,4DAAC,8DAAD,CAAMC,QAAS,GAAf,UACE,2DAAC,6DAAD,UACE,2DAAC,8DAAD,CAAMA,QAAS,GAAf,SACE,2DAAC,kEAAD,8BAGJ,2DAAC,6DAAD,UACE,2DAAC,8DAAD,CAAMA,QAAS,GAAf,SACE,2DAAC,8DAAD,oFAKJ,2DAAC,6DAAD,UACE,2DAAC,8DAAD,CAAMA,QAAS,GAAIC,MAAM,SAAzB,SACE,2DAAC,kEAAD,CACEC,MAAM,mBACNC,UAAQ,EACRC,MAAO,CAAEC,MAAO,QAHlB,SAKE,2DAAC,8DAAD,CACEC,QAASV,WACTW,KAAM,GACNC,MAAOd,YACPe,SAAU,kBAACC,GACT,IAAMF,MAAQE,EAAEC,cAAcH,MAC9B,IACEX,eAAc,GACde,KAAKJ,MAALI,CAAY,CAAEJ,MAAO,QAASN,MAAO,SAAW,SAChD,eACAL,eAAc,GAJhB,QAMEE,UAAUD,QAAU,GACpBH,cAAca,iBAO1B,2DAAC,6DAAD,UACE,2DAAC,8DAAD,CAAMR,QAAS,GAAf,SACE,4DAAC,6DAAD,WACE,2DAAC,8DAAD,CAAMA,QAAS,EAAf,SACE,2DAAC,kEAAD,qBAEF,2DAAC,8DAAD,CAAMA,QAAS,EAAf,SACE,2DAAC,kEAAD,6BAKR,4DAAC,6DAAD,WACE,2DAAC,8DAAD,CAAMA,QAAS,EAAf,SACE,2DAAC,6DAAD,CAEES,SAAUhB,UACVe,MAAOhB,OACPE,WAAY,oBAACF,OAAQqB,OAAT,OAAmBD,KAAKlB,YAALkB,CAAiBpB,OAAQqB,SAHnDf,WAMT,2DAAC,8DAAD,CAAME,QAAS,EAAGC,MAAM,SAAxB,gBACGT,aADH,IACGA,YADH,EACGA,OAAQgB,iBAQNlB,sC,gIC/EAwB,EAZM,WACnB,OACE,cAAC,IAAD,UACE,cAAC,eAAD,UACE,cAAC,mBAAD,CAAkBb,MAAM,QAAxB,SACE,cAAC,iBAAD,mD,cCEKc,EAVI,WACjB,OACE,cAAC,MAAD,UACE,cAAC,OAAD,CAAMf,QAAS,GAAf,SACE,cAAC,YAAD,yB,cC6BOgB,EAhCK,WAAO,IAAD,EACIzB,qBADJ,mBACjBC,EADiB,KACTC,EADS,KAGxB,OACE,cAAC,MAAD,UACE,eAAC,OAAD,CAAMO,QAAS,GAAf,UACE,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAf,SACE,cAAC,YAAD,0BAGJ,eAAC,MAAD,WACE,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,YAAD,qBAEF,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,YAAD,yBAGJ,eAAC,MAAD,WACE,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,IAAD,CAAQS,SAAUhB,EAAWe,MAAOhB,MAEtC,cAAC,OAAD,CAAMQ,QAAS,EAAGC,MAAM,SAAxB,gBACGT,QADH,IACGA,OADH,EACGA,EAAQgB,iB,gBCiCNS,EAxDE,WAAO,IAAD,EACO1B,qBADP,mBACdC,EADc,KACNC,EADM,OAEGF,mBAAiB,IAFpB,mBAEd2B,EAFc,KAERC,EAFQ,KAIrB,OACE,cAAC,MAAD,UACE,eAAC,OAAD,CAAMnB,QAAS,GAAf,UACE,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAf,SACE,cAAC,YAAD,uBAGJ,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAf,SACE,cAAC,QAAD,0CAGJ,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAIC,MAAM,SAAzB,SACE,cAAC,IAAD,CAAWC,MAAM,eAAjB,SACE,cAAC,QAAD,CACEkB,KAAK,SACLC,IAAK,EACLb,MAAOU,GAAQ,EACfT,SAAU,SAACC,GAAD,OACRS,EAAQG,SAASZ,EAAEC,cAAcH,iBAM3C,cAAC,MAAD,UACE,eAAC,OAAD,CAAMR,QAAS,GAAf,UACE,eAAC,MAAD,WACE,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,YAAD,qBAEF,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,YAAD,yBAGJ,eAAC,MAAD,WACE,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,IAAD,CAAQS,SAAUhB,EAAWe,MAAOhB,EAAQ0B,KAAMA,GAAQ,MAE5D,cAAC,OAAD,CAAMlB,QAAS,EAAGC,MAAM,SAAxB,gBACGT,QADH,IACGA,OADH,EACGA,EAAQgB,sBCcVe,EA5DO,WAAO,IAAD,EACEhC,qBADF,mBACnBC,EADmB,KACXC,EADW,OAEQF,mBAAiB,IAFzB,mBAEnBiC,EAFmB,KAERC,EAFQ,KAI1B,OACE,cAAC,MAAD,UACE,eAAC,OAAD,CAAMzB,QAAS,GAAf,UACE,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAf,SACE,cAAC,YAAD,6BAGJ,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAf,SACE,cAAC,QAAD,mCAGJ,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAIC,MAAM,SAAzB,SACE,cAAC,IAAD,CAAWC,MAAM,aAAjB,SACE,cAAC,QAAD,CACEkB,KAAK,SACLC,IAAK,EACLb,MAAOgB,GAAa,EACpBf,SAAU,SAACC,GAAD,OACRe,EAAaH,SAASZ,EAAEC,cAAcH,iBAMhD,cAAC,MAAD,UACE,cAAC,OAAD,CAAMR,QAAS,GAAf,SACE,eAAC,MAAD,WACE,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,YAAD,qBAEF,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,YAAD,6BAKR,eAAC,MAAD,WACE,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,IAAD,CACES,SAAUhB,EACVe,MAAOhB,EACPgC,UAAWA,GAAa,MAG5B,cAAC,OAAD,CAAMxB,QAAS,EAAGC,MAAM,SAAxB,gBACGT,QADH,IACGA,OADH,EACGA,EAAQgB,iB,yBCcNkB,EAlES,WAAO,IAAD,EACAnC,qBADA,mBACrBC,EADqB,KACbC,EADa,OAEUF,oBAAkB,GAF5B,mBAErBoC,EAFqB,KAERC,EAFQ,KAI5B,OACE,cAAC,MAAD,UACE,eAAC,OAAD,CAAM5B,QAAS,GAAf,UACE,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAf,SACE,cAAC,YAAD,+BAGJ,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAf,SACE,cAAC,QAAD,2EAKJ,cAAC,MAAD,UACE,eAAC,OAAD,CAAMA,QAAS,GAAIC,MAAM,SAAzB,UACE,cAAC,IAAD,CAAOC,MAAM,eAAb,SACE,cAAC,qBAAD,CACE2B,KAAK,cACLC,QAASH,EACTlB,SAAU,kBAAMmB,GAAe,OAJH,QAOhC,cAAC,IAAD,CAAO1B,MAAM,mBAAb,SACE,cAAC,qBAAD,CACE2B,KAAK,cACLC,SAAUH,EACVlB,SAAU,kBAAMmB,GAAe,OAJC,cASxC,cAAC,MAAD,UACE,cAAC,OAAD,CAAM5B,QAAS,GAAf,SACE,eAAC,MAAD,WACE,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,YAAD,qBAEF,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,YAAD,6BAKR,eAAC,MAAD,WACE,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,IAAD,CAEE2B,YAAaA,EACblB,SAAUhB,GAFLsC,OAAOJ,MAKhB,cAAC,OAAD,CAAM3B,QAAS,EAAGC,MAAM,SAAxB,gBACGT,QADH,IACGA,OADH,EACGA,EAAQgB,iBCHNwB,EAxDsB,WAAO,IAAD,EACbzC,qBADa,mBAClCC,EADkC,KAC1BC,EAD0B,OAECF,qBAFD,mBAElC0C,EAFkC,KAEnBC,EAFmB,KAIzC,OACE,cAAC,MAAD,UACE,eAAC,OAAD,CAAMlC,QAAS,GAAf,UACE,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAf,SACE,cAAC,YAAD,8CAGJ,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAf,SACE,cAAC,QAAD,+CAGJ,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAIC,MAAM,SAAzB,SACE,cAAC,QAAD,iCAGJ,cAAC,MAAD,UACE,cAAC,OAAD,CAAMD,QAAS,GAAIC,MAAM,SAAzB,SACE,cAAC,IAAD,CAAQQ,SAAUyB,EAAkB1B,MAAOyB,QAG/C,cAAC,MAAD,UACE,cAAC,OAAD,CAAMjC,QAAS,GAAf,SACE,eAAC,MAAD,WACE,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,YAAD,qBAEF,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,YAAD,6BAKR,eAAC,MAAD,WACE,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,IAAD,CACES,SAAUhB,EACVe,MAAOhB,EACP2C,yBAAwB,OAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAezB,UAG7C,cAAC,OAAD,CAAMR,QAAS,EAAGC,MAAM,SAAxB,gBACGT,QADH,IACGA,OADH,EACGA,EAAQgB,iB,yCCsDN4B,EApGU,WAAO,IAAD,EACD7C,qBADC,mBACtBC,EADsB,KACdC,EADc,OAESF,mBAAmB,CAAC,UAF7B,mBAEtB8C,EAFsB,KAETC,EAFS,OAGO/C,qBAHP,mBAGtBgD,EAHsB,KAGVC,EAHU,KAgB7B,OACE,cAAC,MAAD,UACE,eAAC,OAAD,CAAMxC,QAAS,GAAf,UACE,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAf,SACE,cAAC,YAAD,+BAGJ,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAf,SACE,cAAC,QAAD,0CAGJ,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAIC,MAAM,SAAzB,SACE,cAAC,QAAD,mCAGJ,eAAC,MAAD,WACE,cAAC,OAAD,CAAMD,QAAS,EAAGC,MAAM,SAAxB,SACE,cAAC,IAAD,CACEoC,YAAaA,EACb5B,SAAU+B,EACVhC,MAAO+B,MAGX,cAAC,OAAD,CAAMvC,QAAS,EAAGC,MAAM,SAAxB,SACE,cAAC,IAAD,CACEwC,QAAM,EACNC,QAAS,WAvCfH,IACFD,EAAe,GAAD,mBAAKD,GAAL,CAAkBE,EAAW/B,SAC3CgC,EAAc,QAsCNG,UAAWJ,EAHb,sBASJ,cAAC,MAAD,UACE,cAAC,OAAD,CAAMvC,QAAS,GAAIC,MAAM,SAAzB,SACE,cAAC,IAAD,CAAM2C,gBAAc,EAApB,SACGP,EAAYQ,KAAI,SAACrC,EAAOsC,GACvB,OACE,eAAC,WAAD,WACGtC,EAEM,IAANsC,GACC,cAAC,IAAD,CAAQL,QAAM,EAACC,QAAS,kBAjDrBK,EAiDyCD,OAhD9DR,EAAeD,EAAYW,QAAO,SAACC,EAAGH,GAAJ,OAAUA,IAAMC,MAD9B,IAACA,GAiDH,mBAJWD,YAczB,cAAC,MAAD,UACE,cAAC,OAAD,CAAM9C,QAAS,GAAf,SACE,eAAC,MAAD,WACE,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,YAAD,qBAEF,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,YAAD,6BAKR,eAAC,MAAD,WACE,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,IAAD,CACES,SAAUhB,EACVe,MAAOhB,EACP6C,YAAaA,MAGjB,cAAC,OAAD,CAAMrC,QAAS,EAAGC,MAAM,SAAxB,gBACGT,QADH,IACGA,OADH,EACGA,EAAQgB,iBCQN0C,EApGc,WAAO,IAAD,EACL3D,qBADK,mBAC1BC,EAD0B,KAClBC,EADkB,OAEaF,mBAAmB,CAAC,UAFjC,mBAE1B4D,EAF0B,KAETC,EAFS,OAGW7D,qBAHX,mBAG1B8D,EAH0B,KAGVC,EAHU,KAgBjC,OACE,cAAC,MAAD,UACE,eAAC,OAAD,CAAMtD,QAAS,GAAf,UACE,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAf,SACE,cAAC,YAAD,mCAGJ,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAf,SACE,cAAC,QAAD,8CAGJ,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAIC,MAAM,SAAzB,SACE,cAAC,QAAD,uCAGJ,eAAC,MAAD,WACE,cAAC,OAAD,CAAMD,QAAS,EAAGC,MAAM,SAAxB,SACE,cAAC,IAAD,CACEkD,gBAAiBA,EACjB1C,SAAU6C,EACV9C,MAAO6C,MAGX,cAAC,OAAD,CAAMrD,QAAS,EAAGC,MAAM,SAAxB,SACE,cAAC,IAAD,CACEwC,QAAM,EACNC,QAAS,WAvCfW,IACFD,EAAmB,GAAD,mBAAKD,GAAL,CAAsBE,EAAe7C,SACvD8C,EAAkB,QAsCVX,UAAWU,EAHb,sBASJ,cAAC,MAAD,UACE,cAAC,OAAD,CAAMrD,QAAS,GAAIC,MAAM,SAAzB,SACE,cAAC,IAAD,CAAM2C,gBAAc,EAApB,SACGO,EAAgBN,KAAI,SAACrC,EAAOsC,GAC3B,OACE,eAAC,WAAD,WACGtC,EAEM,IAANsC,GACC,cAAC,IAAD,CAAQL,QAAM,EAACC,QAAS,kBAjDrBK,EAiDyCD,OAhD9DM,EAAmBD,EAAgBH,QAAO,SAACC,EAAGH,GAAJ,OAAUA,IAAMC,MADtC,IAACA,GAiDH,mBAJWD,YAczB,cAAC,MAAD,UACE,cAAC,OAAD,CAAM9C,QAAS,GAAf,SACE,eAAC,MAAD,WACE,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,YAAD,qBAEF,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,YAAD,6BAKR,eAAC,MAAD,WACE,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,IAAD,CACES,SAAUhB,EACVe,MAAOhB,EACP2D,gBAAiBA,MAGrB,cAAC,OAAD,CAAMnD,QAAS,EAAGC,MAAM,SAAxB,gBACGT,QADH,IACGA,OADH,EACGA,EAAQgB,iBC3CN+C,EAnDQ,WAAO,IAAD,EACChE,qBADD,mBACpBC,EADoB,KACZC,EADY,OAEmBF,qBAFnB,mBAEpBiE,EAFoB,KAEHC,EAFG,KAI3B,OACE,cAAC,MAAD,UACE,eAAC,OAAD,CAAMzD,QAAS,GAAf,UACE,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAf,SACE,cAAC,YAAD,6BAGJ,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,GAAf,SACE,cAAC,QAAD,yCAGJ,cAAC,MAAD,UACE,cAAC,OAAD,CAAMA,QAAS,EAAGC,MAAM,SAAxB,SACE,cAAC,IAAD,CAAQQ,SAAUgD,EAAoBjD,MAAOgD,QAGjD,cAAC,MAAD,UACE,cAAC,OAAD,CAAMxD,QAAS,GAAf,SACE,eAAC,MAAD,WACE,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,YAAD,qBAEF,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,YAAD,6BAKR,eAAC,MAAD,WACE,cAAC,OAAD,CAAMA,QAAS,EAAf,SACE,cAAC,IAAD,CACES,SAAUhB,EACVe,MAAOhB,EACPkE,UAAS,OAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAiBhD,UAGhC,cAAC,OAAD,CAAMR,QAAS,EAAGC,MAAM,SAAxB,gBACGT,QADH,IACGA,OADH,EACGA,EAAQgB,iBCVNmD,EAvBH,WACV,OACE,gCACE,cAAC,EAAD,IAEA,cAAC,uBAAD,UACE,eAAC,OAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAACrE,EAAA,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,aCnBUsE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.343accc0.chunk.js","sourcesContent":["/* eslint-disable no-eval */\n\nimport React, { useState } from \"react\";\nimport { Cell, Row } from \"@material/react-layout-grid\";\nimport { Subtitle2, Headline5, Body1 } from \"@material/react-typography\";\nimport TextField, { Input } from \"@material/react-text-field\";\nimport Select, { OptionType } from \"react-auto-scroll-time-select\";\n\nconst FindOptionProp = () => {\n  const [option, setOption] = useState<OptionType | null>();\n  const [findOption, setFindOption] = useState<string>(`(({ value }, input) => {\n  let inputValue = input || \"\";\n\n  if (inputValue.indexOf(\":\") < 0) {\n    if (inputValue.length <= 2) {\n      return value.indexOf(inputValue + \":\") > -1;\n    } else {\n      return value.replace(\":\", \"\").indexOf(inputValue) > -1;\n    }\n  } else {\n    return value.indexOf(inputValue) > -1;\n  }\n})`);\n  const [inputValid, setInputValid] = useState<boolean>(true);\n  const [version, setVesion] = useState<number>(0);\n\n  return (\n    <Row>\n      <Cell columns={12}>\n        <Row>\n          <Cell columns={12}>\n            <Headline5>Find Option</Headline5>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12}>\n            <Body1>\n              Set a function to find an option that matches the input character\n            </Body1>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12} align=\"middle\">\n            <TextField\n              label=\"Find Option Func\"\n              textarea\n              style={{ width: \"100%\" }}\n            >\n              <Input\n                isValid={inputValid}\n                rows={13}\n                value={findOption}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  const value = e.currentTarget.value;\n                  try {\n                    setInputValid(true);\n                    eval(value)({ value: \"00:00\", label: \"00:00\" }, \"00:00\");\n                  } catch {\n                    setInputValid(false);\n                  } finally {\n                    setVesion(version + 1);\n                    setFindOption(value);\n                  }\n                }}\n              />\n            </TextField>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12}>\n            <Row>\n              <Cell columns={6}>\n                <Subtitle2>Form</Subtitle2>\n              </Cell>\n              <Cell columns={6}>\n                <Subtitle2>Value</Subtitle2>\n              </Cell>\n            </Row>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={6}>\n            <Select\n              key={version}\n              onChange={setOption}\n              value={option}\n              findOption={(option, input) => eval(findOption)(option, input)}\n            />\n          </Cell>\n          <Cell columns={6} align=\"middle\">\n            {option?.value}\n          </Cell>\n        </Row>\n      </Cell>\n    </Row>\n  );\n};\n\nexport default FindOptionProp;\n","import React from \"react\";\nimport TopAppBar, {\n  TopAppBarRow,\n  TopAppBarSection,\n  TopAppBarTitle,\n} from \"@material/react-top-app-bar\";\n\nconst GlobalHeader = () => {\n  return (\n    <TopAppBar>\n      <TopAppBarRow>\n        <TopAppBarSection align=\"start\">\n          <TopAppBarTitle>React Auto Scroll Time Select</TopAppBarTitle>\n        </TopAppBarSection>\n      </TopAppBarRow>\n    </TopAppBar>\n  );\n};\n\nexport default GlobalHeader;\n","import React from \"react\";\nimport { Cell, Row } from \"@material/react-layout-grid\";\nimport { Headline2 } from \"@material/react-typography\";\n\nconst UsageTitle = () => {\n  return (\n    <Row>\n      <Cell columns={12}>\n        <Headline2>Usage</Headline2>\n      </Cell>\n    </Row>\n  );\n};\n\nexport default UsageTitle;\n","import React, { useState } from \"react\";\nimport { Subtitle2, Headline5 } from \"@material/react-typography\";\nimport { Cell, Row } from \"@material/react-layout-grid\";\nimport Select, { OptionType } from \"react-auto-scroll-time-select\";\n\nconst DefaultProp = () => {\n  const [option, setOption] = useState<OptionType | null>();\n\n  return (\n    <Row>\n      <Cell columns={12}>\n        <Row>\n          <Cell columns={12}>\n            <Headline5>Default</Headline5>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={6}>\n            <Subtitle2>Form</Subtitle2>\n          </Cell>\n          <Cell columns={6}>\n            <Subtitle2>Value</Subtitle2>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={6}>\n            <Select onChange={setOption} value={option} />\n          </Cell>\n          <Cell columns={6} align=\"middle\">\n            {option?.value}\n          </Cell>\n        </Row>\n      </Cell>\n    </Row>\n  );\n};\n\nexport default DefaultProp;\n","import React, { useState } from \"react\";\nimport { Subtitle2, Headline5, Body1 } from \"@material/react-typography\";\nimport { Cell, Row } from \"@material/react-layout-grid\";\nimport TextField, { Input } from \"@material/react-text-field\";\nimport Select, { OptionType } from \"react-auto-scroll-time-select\";\n\nconst SpanProp = () => {\n  const [option, setOption] = useState<OptionType | null>();\n  const [span, setSpan] = useState<number>(30);\n\n  return (\n    <Row>\n      <Cell columns={12}>\n        <Row>\n          <Cell columns={12}>\n            <Headline5>Span</Headline5>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12}>\n            <Body1>Set the minute interval</Body1>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12} align=\"middle\">\n            <TextField label=\"Minutes Span\">\n              <Input\n                type=\"number\"\n                min={1}\n                value={span || 1}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setSpan(parseInt(e.currentTarget.value))\n                }\n              />\n            </TextField>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12}>\n            <Row>\n              <Cell columns={6}>\n                <Subtitle2>Form</Subtitle2>\n              </Cell>\n              <Cell columns={6}>\n                <Subtitle2>Value</Subtitle2>\n              </Cell>\n            </Row>\n            <Row>\n              <Cell columns={6}>\n                <Select onChange={setOption} value={option} span={span || 1} />\n              </Cell>\n              <Cell columns={6} align=\"middle\">\n                {option?.value}\n              </Cell>\n            </Row>\n          </Cell>\n        </Row>\n      </Cell>\n    </Row>\n  );\n};\n\nexport default SpanProp;\n","import React, { useState } from \"react\";\nimport { Cell, Row } from \"@material/react-layout-grid\";\nimport { Subtitle2, Headline5, Body1 } from \"@material/react-typography\";\nimport TextField, { Input } from \"@material/react-text-field\";\nimport Select, { OptionType } from \"react-auto-scroll-time-select\";\n\nconst HourLimitProp = () => {\n  const [option, setOption] = useState<OptionType | null>();\n  const [hourLimit, setHourLimit] = useState<number>(24);\n\n  return (\n    <Row>\n      <Cell columns={12}>\n        <Row>\n          <Cell columns={12}>\n            <Headline5>Hour Limit</Headline5>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12}>\n            <Body1>Set a time limit</Body1>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12} align=\"middle\">\n            <TextField label=\"Hour Limit\">\n              <Input\n                type=\"number\"\n                min={1}\n                value={hourLimit || 1}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setHourLimit(parseInt(e.currentTarget.value))\n                }\n              />\n            </TextField>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12}>\n            <Row>\n              <Cell columns={6}>\n                <Subtitle2>Form</Subtitle2>\n              </Cell>\n              <Cell columns={6}>\n                <Subtitle2>Value</Subtitle2>\n              </Cell>\n            </Row>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={6}>\n            <Select\n              onChange={setOption}\n              value={option}\n              hourLimit={hourLimit || 1}\n            />\n          </Cell>\n          <Cell columns={6} align=\"middle\">\n            {option?.value}\n          </Cell>\n        </Row>\n      </Cell>\n    </Row>\n  );\n};\n\nexport default HourLimitProp;\n","import React, { useState } from \"react\";\nimport { Cell, Row } from \"@material/react-layout-grid\";\nimport { Subtitle2, Headline5, Body1 } from \"@material/react-typography\";\nimport Radio, { NativeRadioControl } from \"@material/react-radio\";\nimport Select, { OptionType } from \"react-auto-scroll-time-select\";\n\nconst IsClearableProp = () => {\n  const [option, setOption] = useState<OptionType | null>();\n  const [isClearable, setIsClearable] = useState<boolean>(true);\n\n  return (\n    <Row>\n      <Cell columns={12}>\n        <Row>\n          <Cell columns={12}>\n            <Headline5>Is Clearable</Headline5>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12}>\n            <Body1>\n              If true, a button to clear the input value is displayed.\n            </Body1>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12} align=\"middle\">\n            <Radio label=\"Is Clearable\" key=\"true\">\n              <NativeRadioControl\n                name=\"isClearable\"\n                checked={isClearable}\n                onChange={() => setIsClearable(true)}\n              />\n            </Radio>\n            <Radio label=\"Is Not Clearable\" key=\"false\">\n              <NativeRadioControl\n                name=\"isClearable\"\n                checked={!isClearable}\n                onChange={() => setIsClearable(false)}\n              />\n            </Radio>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12}>\n            <Row>\n              <Cell columns={6}>\n                <Subtitle2>Form</Subtitle2>\n              </Cell>\n              <Cell columns={6}>\n                <Subtitle2>Value</Subtitle2>\n              </Cell>\n            </Row>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={6}>\n            <Select\n              key={String(isClearable)}\n              isClearable={isClearable}\n              onChange={setOption}\n            />\n          </Cell>\n          <Cell columns={6} align=\"middle\">\n            {option?.value}\n          </Cell>\n        </Row>\n      </Cell>\n    </Row>\n  );\n};\n\nexport default IsClearableProp;\n","import React, { useState } from \"react\";\nimport { Cell, Row } from \"@material/react-layout-grid\";\nimport { Subtitle2, Headline5, Body1 } from \"@material/react-typography\";\nimport Select, { OptionType } from \"react-auto-scroll-time-select\";\n\nconst DefaultScrollOptionValueProp = () => {\n  const [option, setOption] = useState<OptionType | null>();\n  const [defaultOption, setDefaultOption] = useState<OptionType | null>();\n\n  return (\n    <Row>\n      <Cell columns={12}>\n        <Row>\n          <Cell columns={12}>\n            <Headline5>Default Scroll Option Value</Headline5>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12}>\n            <Body1>Set focus options by default</Body1>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12} align=\"middle\">\n            <Body1>Default option</Body1>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12} align=\"middle\">\n            <Select onChange={setDefaultOption} value={defaultOption} />\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12}>\n            <Row>\n              <Cell columns={6}>\n                <Subtitle2>Form</Subtitle2>\n              </Cell>\n              <Cell columns={6}>\n                <Subtitle2>Value</Subtitle2>\n              </Cell>\n            </Row>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={6}>\n            <Select\n              onChange={setOption}\n              value={option}\n              defaultScrollOptionValue={defaultOption?.value}\n            />\n          </Cell>\n          <Cell columns={6} align=\"middle\">\n            {option?.value}\n          </Cell>\n        </Row>\n      </Cell>\n    </Row>\n  );\n};\n\nexport default DefaultScrollOptionValueProp;\n","import React, { useState } from \"react\";\nimport { Cell, Row } from \"@material/react-layout-grid\";\nimport { Subtitle2, Headline5, Body1 } from \"@material/react-typography\";\nimport Button from \"@material/react-button\";\nimport List, { ListItem } from \"@material/react-list\";\nimport Select, { OptionType } from \"react-auto-scroll-time-select\";\n\nconst HideOptionsProps = () => {\n  const [option, setOption] = useState<OptionType | null>();\n  const [hideOptions, setHideOptions] = useState<string[]>([\"00:30\"]);\n  const [hideOption, setHideOption] = useState<OptionType | null>();\n\n  const addHideOption = () => {\n    if (hideOption) {\n      setHideOptions([...hideOptions, hideOption.value]);\n      setHideOption(null);\n    }\n  };\n\n  const delHideOption = (index: number) => {\n    setHideOptions(hideOptions.filter((_, i) => i !== index));\n  };\n\n  return (\n    <Row>\n      <Cell columns={12}>\n        <Row>\n          <Cell columns={12}>\n            <Headline5>Hide Options</Headline5>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12}>\n            <Body1>Specify options to hide</Body1>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12} align=\"middle\">\n            <Body1>Hide Option List</Body1>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={9} align=\"middle\">\n            <Select\n              hideOptions={hideOptions}\n              onChange={setHideOption}\n              value={hideOption}\n            />\n          </Cell>\n          <Cell columns={3} align=\"middle\">\n            <Button\n              raised\n              onClick={() => addHideOption()}\n              disabled={!hideOption}\n            >\n              Add\n            </Button>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12} align=\"middle\">\n            <List nonInteractive>\n              {hideOptions.map((value, i) => {\n                return (\n                  <ListItem key={i}>\n                    {value}\n\n                    {i !== 0 && (\n                      <Button raised onClick={() => delHideOption(i)}>\n                        Del\n                      </Button>\n                    )}\n                  </ListItem>\n                );\n              })}\n            </List>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12}>\n            <Row>\n              <Cell columns={6}>\n                <Subtitle2>Form</Subtitle2>\n              </Cell>\n              <Cell columns={6}>\n                <Subtitle2>Value</Subtitle2>\n              </Cell>\n            </Row>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={6}>\n            <Select\n              onChange={setOption}\n              value={option}\n              hideOptions={hideOptions}\n            />\n          </Cell>\n          <Cell columns={6} align=\"middle\">\n            {option?.value}\n          </Cell>\n        </Row>\n      </Cell>\n    </Row>\n  );\n};\n\nexport default HideOptionsProps;\n","import React, { useState } from \"react\";\nimport { Cell, Row } from \"@material/react-layout-grid\";\nimport { Subtitle2, Headline5, Body1 } from \"@material/react-typography\";\nimport Button from \"@material/react-button\";\nimport List, { ListItem } from \"@material/react-list\";\nimport Select, { OptionType } from \"react-auto-scroll-time-select\";\n\nconst DisabledOptionsProps = () => {\n  const [option, setOption] = useState<OptionType | null>();\n  const [disabledOptions, setDisabledOptions] = useState<string[]>([\"00:30\"]);\n  const [disabledOption, setDisabledOption] = useState<OptionType | null>();\n\n  const addHideOption = () => {\n    if (disabledOption) {\n      setDisabledOptions([...disabledOptions, disabledOption.value]);\n      setDisabledOption(null);\n    }\n  };\n\n  const delHideOption = (index: number) => {\n    setDisabledOptions(disabledOptions.filter((_, i) => i !== index));\n  };\n\n  return (\n    <Row>\n      <Cell columns={12}>\n        <Row>\n          <Cell columns={12}>\n            <Headline5>Disabled Options</Headline5>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12}>\n            <Body1>Specify options to disabled</Body1>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12} align=\"middle\">\n            <Body1>Disabled Option List</Body1>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={9} align=\"middle\">\n            <Select\n              disabledOptions={disabledOptions}\n              onChange={setDisabledOption}\n              value={disabledOption}\n            />\n          </Cell>\n          <Cell columns={3} align=\"middle\">\n            <Button\n              raised\n              onClick={() => addHideOption()}\n              disabled={!disabledOption}\n            >\n              Add\n            </Button>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12} align=\"middle\">\n            <List nonInteractive>\n              {disabledOptions.map((value, i) => {\n                return (\n                  <ListItem key={i}>\n                    {value}\n\n                    {i !== 0 && (\n                      <Button raised onClick={() => delHideOption(i)}>\n                        Del\n                      </Button>\n                    )}\n                  </ListItem>\n                );\n              })}\n            </List>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12}>\n            <Row>\n              <Cell columns={6}>\n                <Subtitle2>Form</Subtitle2>\n              </Cell>\n              <Cell columns={6}>\n                <Subtitle2>Value</Subtitle2>\n              </Cell>\n            </Row>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={6}>\n            <Select\n              onChange={setOption}\n              value={option}\n              disabledOptions={disabledOptions}\n            />\n          </Cell>\n          <Cell columns={6} align=\"middle\">\n            {option?.value}\n          </Cell>\n        </Row>\n      </Cell>\n    </Row>\n  );\n};\n\nexport default DisabledOptionsProps;\n","import React, { useState } from \"react\";\nimport { Cell, Row } from \"@material/react-layout-grid\";\nimport { Subtitle2, Headline5, Body1 } from \"@material/react-typography\";\nimport Select, { OptionType } from \"react-auto-scroll-time-select\";\n\nconst StartTimeProps = () => {\n  const [option, setOption] = useState<OptionType | null>();\n  const [startTimeOption, setStartTimeOption] = useState<OptionType | null>();\n\n  return (\n    <Row>\n      <Cell columns={12}>\n        <Row>\n          <Cell columns={12}>\n            <Headline5>Start Time</Headline5>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12}>\n            <Body1>Specify the start time</Body1>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={9} align=\"middle\">\n            <Select onChange={setStartTimeOption} value={startTimeOption} />\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={12}>\n            <Row>\n              <Cell columns={6}>\n                <Subtitle2>Form</Subtitle2>\n              </Cell>\n              <Cell columns={6}>\n                <Subtitle2>Value</Subtitle2>\n              </Cell>\n            </Row>\n          </Cell>\n        </Row>\n        <Row>\n          <Cell columns={6}>\n            <Select\n              onChange={setOption}\n              value={option}\n              startTime={startTimeOption?.value}\n            />\n          </Cell>\n          <Cell columns={6} align=\"middle\">\n            {option?.value}\n          </Cell>\n        </Row>\n      </Cell>\n    </Row>\n  );\n};\n\nexport default StartTimeProps;\n","import React from \"react\";\nimport { TopAppBarFixedAdjust } from \"@material/react-top-app-bar\";\nimport GlobalHeader from \"../components/molecules/GlobalHeader\";\nimport { Grid } from \"@material/react-layout-grid\";\nimport UsageTitle from \"./molecules/UsageTitle\";\nimport DefaultProp from \"./molecules/DefaultProp\";\nimport SpanProp from \"./molecules/SpanProp\";\nimport HourLimitProp from \"./molecules/HourLimitProp\";\nimport FindOptionProp from \"./molecules/FindOptionProp\";\nimport IsClearableProp from \"./molecules/IsClearableProp\";\nimport DefaultScrollOptionValueProp from \"./molecules/DefaultScrollOptionValueProp\";\nimport HideOptionsProps from \"./molecules/HideOptionsProps\";\nimport DisabledOptionsProps from \"./molecules/DisabledOptionsProps\";\nimport StartTimeProps from \"./molecules/StartTimeProps\";\n\nconst App = () => {\n  return (\n    <div>\n      <GlobalHeader />\n\n      <TopAppBarFixedAdjust>\n        <Grid>\n          <UsageTitle />\n          <DefaultProp />\n          <SpanProp />\n          <HourLimitProp />\n          <FindOptionProp />\n          <IsClearableProp />\n          <DefaultScrollOptionValueProp />\n          <HideOptionsProps />\n          <DisabledOptionsProps />\n          <StartTimeProps />\n        </Grid>\n      </TopAppBarFixedAdjust>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/App.scss\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}